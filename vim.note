
trinity

EnhancedCommentify
SuperTab
taglist
tabbar: : Alt-1 Alt-2
AutoExplorer help
bufexplorer  : \be \bv \bs

######################################################################
" au! QuickFixCmdPre *.[ch] call Search_Word() 
func Search_Word() 
  let w = expand("<cword>")
  exe "vimgrep " w " *.c *.h" 
  exe 'copen' 
endfun

$ctags -R -h ".h.c.cpp.java"
download taglist
map <f9> :Tlist<CR>

:Ex, [[,]], :tab sp
User-manual
http://vimdoc.sourceforge.net/htmldoc/usr_toc.html
tab-pages
http://vim.wikia.com/wiki/Using_tab_pages
http://vim.wikia.com/wiki/Quick_tips_for_using_tab_pages

######################################################################
vim:
  Tab
      :set tabline 	
      next/prevous tab: gt,gT
      jump tab: {num}gt
  help
      helpgrep, help v_, i_, c_, :, ''
  Normal Mode command
  Visual Mode command  v_
  Insert Mode Command  i_
  Command-line command :
  Command-line editing c_
  option               ''

  repeat single change: ., @:
  repeat change on pattern matched:
              g/{pattern}/{cmd}, g/pattern/normal {cmd}
             %s/{pattern}/{cmd}
  repeat multiple changes using record:
          qq: record typing in reg
          @q: execute reg,eg 99@q, 99@@
	  :@q: execute reg as Ex command, :@@, :@:
  vim script:
          :so {file}: Read Ex Command from {file}
          :so! {file}: Read Normal Mode Command from {file}
  vim -e -s : Ex Mode,Silent Mode
  vim -s script file.txt
  Find: gD
  register: "ap, "ayy, @a
            "AY // Uppercase means append
      paste register in Command-line editing: <C-r><reg>
  Range: line,pattern,mark('a)
  Ex Mode:
  Paste Word under Cursor: <C-r><C-w>
  Paste register content: <C-r><register>
  Filter commands:
      {range}!{filter}    // replace with output
      {range}r !{cmd}  // insert output of command below the cursor
      {range}w !{cmd}
######################################################################
vim today:01/14
[usr_24.txt] insert quickly
    use r & b moving
    insert mode: repeat <C-a>, repeat & exit insert <C-@>
                 repeat previous/next line <C-y>, <C-e>
		 move: <C>/<S>+left,right
		 undo: <C-w>,<C-u>
                 completion: <C-p>, <C-x><C-o>
		 paste register: <C-r>, <C-r><C-r>
		 abbrev: :ia <x> <y>,:iuna,:iabc   
		 //:ab, :una, :abc or command line mode
		 map: :imap, :inorea
		 enter special word: <C-v> x41
		 excute Normal mode: <C-o>
    [usr_03.txt] move around 
    line: 0,^,$: first char, first non-blank
    line number: G
    screen: 50%, H,M,L
    page: <C-e>/<C-y>, <C-d>/<C-u>
    word: w,b: e,ge, start/end of word
    char: fx,tx  :find/to
vim today:01/15
[usr_07] editing more than one file
    file switch[C-^]
[usr_08] Splitting windows
    vim diff: :diffupdate, dp, do
    tab pages:
[usr_04]  Making small changes
    motion object,Text objects:
        |WORD| non-blank
        |word| letter,digit,underscore
        inner word: when counting
        A word
    delete&cut:    d{object},dd      Shortcuts: dl:x, d$|D,dh:X
    change&insert: c{object},cc      Shortcuts: cl:s, c$|C,cc|S
    join: J,gJ

    replace: r
    command-line window: q:, press ENTER to execute
    Reference:
        # The Ultimate Vimrc
        #reference: http://amix.dk/vim/vimrc.html
        git clone git://github.com/amix/vimrc.git ~/.vim_runtime
        sh ~/.vim_runtime/install_awesome_vimrc.sh
        #https://github.com/amix/vimrc
        # extension: https://github.com/jistr/vim-nerdtree-tabs

vim today:01/16
[change.txt]
    Buffer Explorer, TAB, NERDTREE
vim today:01/17
|usr_44.txt|
    example: $VIMRUNTIME/syntax
    List defined items:syntax
        :syntax list {group-name}
    Define a keyword:
        :syntax keyword {group} {keyword} ...
	:syntax match   {group} /pattern/
	:syntax region  {group} start=/pat/ skip=/pat/ end=/pat/
	eg. :syntax region  {group} start=/"/ skip=/\"/ end=/"/
	eg. :syntax keyword      xType    int long char
	eg. :syntax   match   xComment            /#.*/
	:hi link {new_group} {exist_group}
	work with every color scheme:
	:hi define link nameString String
    Adding to an existing syntax file:
        syntax/{the same filename}.vim
    Adding a filetype: filetype.vim, scripts.vim
        1. runtimpath/filetype.vim
        autocommand|40.3| augroup filetypedetect
        au BufNewfile,BufRead *.xyz setf xyz
        augroup END
        2. runtimpath/scripts.vim: #!/bin/xyz 
        if did_filetype()
	    finish
        endif
        if getline(1) =~ '^#!.*[/\\]xyz\>'
            setf xyz
        endif
    session
	:mks a.vim
	vim -S a.vim
    search  #,*, /,? gd,gD
