
trinity

EnhancedCommentify
SuperTab
taglist
tabbar: : Alt-1 Alt-2
AutoExplorer help
bufexplorer  : \be \bv \bs

######################################################################
" au! QuickFixCmdPre *.[ch] call Search_Word() 
func Search_Word() 
  let w = expand("<cword>")
  exe "vimgrep " w " *.c *.h" 
  exe 'copen' 
endfun

$ctags -R -h ".h.c.cpp.java"
download taglist
map <f9> :Tlist<CR>

:Ex, [[,]], :tab sp
User-manual
http://vimdoc.sourceforge.net/htmldoc/usr_toc.html
tab-pages
http://vim.wikia.com/wiki/Using_tab_pages
http://vim.wikia.com/wiki/Quick_tips_for_using_tab_pages

######################################################################
vim:
  quit:  :q!|ZQ, :wq|ZZ
  Tab
      :set tabline 	
      next/prevous tab: gt,gT
      jump tab: {num}gt
  help
      helpgrep, help v_, i_, c_, :, ''
  Normal Mode command
  Visual Mode command  v_
  Insert Mode Command  i_
  Command-line command :
  Command-line editing c_
  option               ''

  repeat single change: ., @:
  repeat change on pattern matched:
              g/{pattern}/{cmd}, g/pattern/normal {cmd}
             %s/{pattern}/{cmd}
  repeat multiple changes using record:
          qq: record typing in reg
          @q: execute reg,eg 99@q, 99@@
	  :@q: execute reg as Ex command, :@@, :@:
  vim script:
          :so {file}: Read Ex Command from {file}
          :so! {file}: Read Normal Mode Command from {file}
  vim -e -s : Ex Mode,Silent Mode
  vim -s script file.txt
  Find: gD
  register: "ap, "ayy, @a
            "AY // Uppercase means append

            paste register in Command-line editing: <C-r><reg>
  read-only register:
      "#: last/prev name buffer (file)
      "%: current name of buffer
      ":: last executed command-line
      ".: last insert text

  Range: line,pattern,mark('a)
  Ex Mode:
  Paste Word under Cursor: <C-r><C-w>
  Paste register content: <C-r><register>
  Filter commands:
      {range}!{filter}    // replace with output
  read/write file
      {range}r !{cmd}  // insert output of command below the cursor
      {range}w !{cmd}
################## organized
motion
	word, sentence, paragraph, section
	|WORD| non-blank
	|word| letter,digit,underscore
	( sentence: ending at |.!?| |\n\sp\t|
	{ paragraph: begin after empty line
	[[ section: begin after ^L in the first column, '{' at first
	[] block: a[,a]
	() block: ab,a(,a)
	<> block: a<,a>
        {} block: aB,a{,a}
	tag block: at <tag> </tag>
	q string: a",a',a`
buffer, window, tab page |windows.txt|
   A buffer is the in-memory text of a file.
   A window is a viewport on a buffer.
   A tab page is a collection of windows.
    buffer list:   :ls
    buffer switch: :bu N,     N CTRL-^
    buffer name: :file, remove name: :0f

    :windo: operation on all window in current tab
    :bufdo: operation on all buffer in bufferlist

    window new: C-w n, C-w v, C-w s
    window close : C-w q, C-w c
    window only one window: C-w o

    window N buffer:  :split #N, N CTRL-W ^ 
    window tag,file: C-w ], C-w f
		
    window switch: topleft     C-w t, last C-w p
                   bottomright C-w b,
		   next C-w w/W, goto Nth  N C-w w

    window move: C-w r, C-w x
                 C-w J, C-w K, C-w H, C-w L
    window to tab: C-w T
    window size: balance   :  C-w =
		 set height:  z<N><CR>, C-w _ relative: C-w -,+
		 set width : C-w |            relative: C-w <,>
    Tab open file: C-w gf

######################################################################
vim today:01/14
[usr_24.txt] insert quickly
    use r & b moving
    insert mode: repeat <C-a>, repeat & exit insert <C-@>
                 repeat previous/next line <C-y>, <C-e>
		 delete: C-h, C-w, C-u, C-k
		 insert tab,newline: C-I,C-T,C-D,C-J
		 move: C-G j/k,C/S-left,right
                 completion: <C-p>, <C-x><C-o>
		 paste register: <C-r>, <C-r><C-r>
		 abbrev: :ia <x> <y>,:iuna,:iabc   
		 //:ab, :una, :abc or command line mode
		 map: :imap, :inorea
		 enter special word: <C-v> x41
		 excute Normal mode: <C-o>
    [usr_03.txt] move around 
    line: 0,^,$: first char, first non-blank
           center of screen: gm
           fF,tT: ,/;
	   line number:30, character 20
	   addressing: 30G, 20|

    screen: 50%, H,M,L
    block: {/},
    function: [[,]]
    page: <C-e>/<C-y>, <C-d>/<C-u>
    word: w,b: e,ge, start/end of word
    char: fx,tx  :find/to
vim today:01/15
[usr_07] editing more than one file
    file switch[C-^]
[usr_08] Splitting windows
    vim diff: :diffupdate, dp, do
    tab pages:
[usr_04]  Making small changes
    motion object,Text objects:
        |WORD| non-blank
        |word| letter,digit,underscore
        inner word: when counting
        A word
	word, sentence, paragraph, section
	sentence: ending at |.!?| |\n\sp\t|
	paragraph: begin after empty line '{'
	section: begin after ^L in the first column 
	[] block: a[,a]
	() block: ab,a(,a)
	<> block: a<,a>
        {} block: aB,a{,a}
	tag block: at <tag> </tag>
	q string: a",a',a`
     previously yanked or changed: '[,']
     prev posi before jump: ''
     last insert mode stop: '^,gi, '.

     jump: <C-o>,<C-i>

    delete&cut:    d{object},dd      Shortcuts: dl:x, d$|D,dh:X
    change&insert: c{object},cc      Shortcuts: cl:s, c$|C,cc|S
    join: J,gJ

    replace: r
    command-line window: q:, press ENTER to execute
    Reference:
        # The Ultimate Vimrc
        #reference: http://amix.dk/vim/vimrc.html
        git clone git://github.com/amix/vimrc.git ~/.vim_runtime
        sh ~/.vim_runtime/install_awesome_vimrc.sh
        #https://github.com/amix/vimrc
        # extension: https://github.com/jistr/vim-nerdtree-tabs

vim today:01/16
[change.txt]
    Buffer Explorer, TAB, NERDTREE
vim today:01/17
|usr_44.txt|
    example: $VIMRUNTIME/syntax
    List defined items:syntax
        :syntax list {group-name}
    Define a keyword:
        :syntax keyword {group} {keyword} ...
	:syntax match   {group} /pattern/
	:syntax region  {group} start=/pat/ skip=/pat/ end=/pat/
	eg. :syntax region  {group} start=/"/ skip=/\"/ end=/"/
	eg. :syntax keyword      xType    int long char
	eg. :syntax   match   xComment            /#.*/
	:hi link {new_group} {exist_group}
	work with every color scheme:
	:hi define link nameString String
    Adding to an existing syntax file:
        syntax/{the same filename}.vim
    Adding a filetype: filetype.vim, scripts.vim
        1. runtimpath/filetype.vim
        autocommand|40.3| augroup filetypedetect
        au BufNewfile,BufRead *.xyz setf xyz
        augroup END
        2. runtimpath/scripts.vim: #!/bin/xyz 
        if did_filetype()
	    finish
        endif
        if getline(1) =~ '^#!.*[/\\]xyz\>'
            setf xyz
        endif
    session
	:mks a.vim
	vim -S a.vim
    search
        pattern: /,?
	word: *,#  partial-match: g*,g#
	definition:gd,gD   local/global
        stop highlight: :noh      //diff :set nohls
	search-offset: /pattern/offset
	    +/-[num] : line
	    e+/-[num]: [num] char to end   of the match
	    b+/-[num]: [num] char to start of the match
	    ;{pattern}: perform another search



|cmdline.txt|
    Commandline-editing:
        enter: <C-J> or <CR>
        mov:<C-B>/<C-E> to begin/end of cmdline
	delete:<C-W>,<C-H>
	paste: <C-R><C-W>: word under the cursor
	       <C-R><C-A>: WORD under the cursor
	       <C-R> <C-F>/<C-P>: Filename/Path under the cursor, like |gf|
	       <C-R><C-R>{regname}: paste literally.
	completion: |cmdline-completion|
	       <C-D>: list names that match the pattern
	       <C-I>or<wildchar>: insert the first match
	       <C-A>: insert all names that match the pattern

|scroll.txt|
	Scrolling: 
		Extra lines/Y
		Downward/Upward
		Forward/Backward
	scrolling relative to cursor: zz,zb,zt

|usr_40.txt| create new commands
    Key Mapping:map
    Command-line commands:command
    autocmd


case: ~,gu/gU
	|zf|	zf	define a fold
	|g@|    g@      call function set with the 'operatorfunc' option
        |gq|	gq	text formatting                
y+f;yfe
left-right motion: h/l,^/$,0/g_, gm,|(bar)
            fast: f/F,t/T,  (;,)
up-down motion:j/k
vim today: 01/30
|usr_29.txt| Moving through programs
    :set tags=./tags,./*/tags
    jump to tag: :tag, C-], C-W + ]
    multiple tags:  :tnext, :tselect <tagname>
    search tag:  :tag /<name>
    preview windows: :ptag <name>, C-W + }
        :pedit, :pclose, :psearch
    moving through program:
        #if, #endif: [#, ]#

    block motion
    	outer block: '{' '}' in the first column
	1. mov between outer blocks:
	prev/next '{': [[,]]
	prev/next '}': [],][
	2. traverse between blocks : [m, ]m

	3. out of current block: : [{, ]}, {, }
    braces:[(,])
    comment[/,]/
|usr_25.txt| format

    insert line break automatically

    breaking line: :set textwidth=30

    display lines with a line break: 'wrap'

    reformat: gq  |auto-format|
        gqap   "ap" -> a-paragraph
	gggqG
    |fo-table|, |formatprg|

    alignment
    :{range}center |width|
    :{range}right
    :{range}left [margin]

    justifying  _j, gf, :%!fmt

    Indents and tabs
    :set autoindent  get the same indent as previous line
    increasing indent >
    :set shiftwidth=4    insert four spaces
    tabstop   tabstop should always 8
    :set softtabstop=4	  
    use spaces instead of tab, expandtab
    wrong tab recovery:  :set tabstop=3, :retab 8
open file under cursor
gf
C-w f
    shift in insert mode: C-t,C-d
#preview window
    :pta
    C-w z
folder
history
:undol  undo list
cscope as tag
:set cst
:wundo 
open file under cursor
gf
C-w f
|usr_28.txt| folder
    eazy to reorder: yank,delete
    Fold,Open,Close: zf,zo,zc
    all open,close: zr,zm, zR,zM  recursive/folds M-ore.
    toggle: zi
    :set foldcolumn=4
|pi_netrw.txt|
    browse dir = cur dir: c
    remove file: <del>, D
    Rename file: R
    new file/dir: %,d
    open file/dir: <CR>,o|v,t (cur win, new win, new tab)
    preview: p
    hide dot-files: gh
    listing: i   thin, long, wide, tree list
    sorting: s, r
    Query: qf,qb
    change dir: u,U
    Mark:
        unmark all:mu
	Delete marked: D
        directory bookmark: mb,mB,gb
        file mark: mf, mr
	target:mt -> copy:mc, move:mm
        diff:md, edit:me,
	vimgrep:mg, shell:mx
:se ff
:se ff=unix or dos
digraph: C-V C-M //CR
filter:   :{range}!{filter} ![arg]
help %s
help :g
preview window
quickfix: 
:ju

range:
    line number representation
        . current line
	$ last line
	% = 1,$
	't  position of mark t

change highlight color
highlight Search ctermfg=0 ctermbg=2

:%s/\d\+/\=printf("%X", submatch(0))/g
:g/^\s*DEBUG/s!.*!/* & */!

execute Ex/Normal mode command:
    exe {expr}: execute after evaluation, use '.' to concat string
        :g//exe "norm I\<ESC>"
        :sil lcd %:p:h | exe'!python '.expand('%') | sil lcd -
	:execute 'while i < 5 | echo i | let i = i + 1 | endwhile'
    norm {commands}
        :g/^\s*DEBUG/exe "norm! I/* \<Esc>A */\<Esc>"
[usr_41.txt]
	b:name		variable local to a buffer
	w:name		variable local to a window
	g:name		global variable (also in a function)
	v:name		variable predefined by Vim

