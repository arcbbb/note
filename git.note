#### Gitk install
1. cygwin: "xinit" and "X-start-menu-icons"
2. .bashrc: export DISPLAY=:0.0.
3. touch ~/.startxwinrc
$. git gui, gitk
########### Reference
################# Git gittutorial
################# Git gitworkflows
1. http://ihower.tw/git/files/ihower-git.pdf
	Git Clone
	SSH: $ git clone git@github.com:arcbbb/note.git
	HTTP/HTTPS  $ git clone https://arcbbb@github.com/arcbbb/note.git
	Git Protocol: fastest, read-only
	$ git clone git://github.com/arcbbb/note.git
	File
	reference:https://github.com/schacon/git-presentations
2. Git Hub
	$ git clone https://github.com/arcbbb/note.git
	git remote rm github_note
	git remote add github_note https://github.com/arcbbb/note.git
	git remote set-url github_note https://arcbbb@github.com/arcbbb/note.git
	git push github_note master
3. Git User's Manual
http://www.kernel.org/pub/software/scm/git/docs/v1.7.3/user-manual.html#resolving-a-merge

4. http://www.landley.net/writing/git-bisect-howto.html
#### Problem
$ git svn clone https://edk2.svn.sourceforge.net/svnroot/edk2/trunk/edk2
$ GIT_TRACE=1 git svn fetch

##### LOG
$ git log -p -2
$ git log --stat
$ git log --pretty
##### DIFF 
$ git diff --cached

#### UNDO

Unmodified <--1 Modified <--2 Staged <--3 Commit

	1. Modified -> Unmodified file
		$ git checkout -- <filename>

	2. Staged -> Modified file
		$ git reset HEAD <filename>

	3. Last Commit
		$ git commit
		$ git add ... // fix last commit
		$ git commit --amend

	4. CLEAN working directory
		$ git checkout -f
		$ git clean -d

#### MERGE
#Note: Commit Object
	1. Merge Commit
	more than 1 parents, find common ancestor
#### REBASE  3.6
#### REWRITE History
	reorder/remove commits
	$ git rebase -i
	squash/split apart commits
	$ git reset
	$ git commit
	$ git rebase
	rewrite a large number of commits
	$ git filter-branch

################# Concept
File, Commit/Snapshot, Branch, Repository

Commit/Snapshot
    tag commit:
    $ git tag v2.5 <SHA-1>
    HEAD:    last commit
    HEAD^,HEAD~1:    parent of HEAD
    HEAD^1, HEAD^2 // for merge commit:    parent 1&2
    HEAD..HEAD^  : exclude HEAD, show HEAD^ diff
    HEAD...HEAD^ : exclude common, show both diff
$ git diff
	--find-copies-harder
	detect renamed or copied files
	1. Diff working tree with index(staged area), commit
	   git diff          --
	   git diff [commit] --

	   e.g. git diff   HEAD   --

	2. Diff staging area with commit
	   git diff --cached [commit] --

	   e.g. git diff --cached   HEAD   --

	3. Diff two commit 
	   git diff [commit] [commit] --
	   git diff [commit]..[commit] --

	4. Diff two branch
	   git diff [commit]...[commit] --

	   equals git diff $(git-merge-base A B) B




#### Git Pro: ch9 Git Internals
FILE config: Project-specific configuration options.
DIR  info: global ignore file
DIR  hooks: hook shell scripts, ch6
### CORE ###
DIR  objects: all the content of the Database.
DIR  refs: <SHA-1> of the last commit for each branch.
FILE HEAD: points to the branch currently checked out.
FILE index: stores staging area information.


Examine git object
    $ git cat-file 
    $ git cat-file -p master^{tree}
Creating a blob: just the content
    $ git hash-object 
    filename(40byte) = SHA-1 hash(header+file content)
    content    = Zlib (file content)

    $ echo 'test content' | git hash-object -w --stdin
	$ git cat-file -p <SHA-1>
Creating a tree: filename & blob SHA-1
    1. add blob to staging area
	    $ git update-index --add <filename>
	    or    update-index --add --cacheinfo <mode> <SHA-1> <filename>
	    $ git write-tree

	    mode = 100644, 100755, 120000
	    e.g. create tree dir and blob abc.
	    $ git update-index --add dir/abc
	    $ git write-tree
	    
    add existing tree to staging area
	    $ git read-tree --prefix=<dirname> <SHA-1>
	    $ git write-tree
Creating a commit: 
    $ git commit-tree <tree SHA-1>
    initial  commit:   no parent
    ordinary commit:  one parent
    merge    commit: more parent


	git add:  add to staging area, write out tree
	git commit: 
Creating a reference:
    manually: $ echo <SHA-1> > .git/refs/heads/master
    command:  $ git update-ref refs/heads/master <SHA-1>
Creating a branch test:
    $ git update-ref refs/heads/test <SHA-1>
.git/HEAD:
    1. read
    $ git symbolic-ref HEAD 
    2. set
    $ git symbolic-ref HEAD refs/heads/test

$ git log
    -p: show the patch with each commit
    --stat: show statistics
    --shortstat: display only changed/insert/delete line
    --name-only: list of modified files
    --name-status: name + status
    --abbrev-commit: abbrev SHA-1 checksum
    --graph:
    --pretty: oneline, short, full, fuller, format:
	format:"%h - %an, %ar : %s"
		%h: abbrev Hash
		%an: author name, who write the patch
		%ar: author relative date
		%cn: committer name, who apply the patch
    --since, --after
    --until, --before
    --author, --committer
    -- <path>

#### git internal operation
	1. List the contents of a tree object
	$ git ls-tree
	2. Show information about files in the index and the working tree
	$ git ls-file
	3. list commit root dir
	$ git cat-file <commit>^{tree}

#### repository operation: basic
	1. init:  git init
	2. set remote: git remote add <name> <repo>
	3. sync: git fetch <r_name>/<branch>
	*. combination: add & fetch
	$ git remote add -t IpmiOnly -f ipmi ~/rc70227u

	*. direct fetch. refspec +<src>:<dst>
	$ git fetch <remote> <r-branch>:<local>
	$ git fetch origin master:refs/remotes/origin/master
#### repository operation: composite
	1. clone: git clone <dir> <branch>
	2. pull: fetch&merge
	$ git  pull <dir> <branch>

#### output
	$ mkdir $COPY
	$ git archive master | tar xCv $COPY
	$ git archive master | bzip2 > master.tar.bz2


#### bisect
	start,bad,good,log,replay,reset

##################  Advance operation #############
#### subtree
	   1. fetch another <repo>
	   $ git remote add <r-name> <repository>
	   $ git fetch <r-name>
	   2. set up an branch for <repo>
	   $ git checkout -b <b-name> <r-name/branch>
	   3. keypoint1. add tree to index
	   $ git read-tree --prefix=<d-name> -u <b-name>

	   // pull method
	   $ git checkout <b-name>
	   $ git pull
	   $ git checkout master
	   $ git merge --squash -s subtree --no-commit <b-name>

	   // push method
	   $ git checkout <b-name>
	   $ git merge --squash -s subtree --no-commit master

	   // diff method: diff dir & branch
	   $ git diff-tree -p <b-name>
	   or git diff-tree -p <r-name/branch>
#### submodule
	   $ git submodule add <repository> .
	   it add .gitmodule in DIR
	   $ git clone <repository>
	   $ git submodule init
	   $ git submodule update
	   $ git merge origin/master
	   $ git submodule update
