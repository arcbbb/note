
### Memory:
1. Pei Hob is read-only in Dxe

### DEBUG Code
## INF Updates
+[BuildOptions]
+  MSFT:*_*_*_CC_FLAGS = /Od /Oy-
+  C_FLAGS = $(C_FLAGS) /Od /Oy-

__FUNCTION__ __FILE__ "%d" __LINE__

Example 1:

DEBUG((DEBUG_INFO, "InstallProtocolInterface: %g %p\n", Protocol, Interface));

Example 2:

DEBUG_CODE (
    UINTN  ErrorLevel;
)
DEBUG_CODE (
    DEBUG((ErrorLevel, "InstallProtocolInterface: %g %p\n", Protocol, Interface));
)
#### DEBUG ClassLibrary

DebugLib|MdePkg/Library/BaseDebugLibNull/BaseDebugLibNull.inf       default
	DebugPrint -> {}

        |IntelFrameworkModulePkg/Library/PeiDxeDebugLibReportStatusCode/PeiDxeDebugLibReportStatusCode.inf
	DebugPrint -> ReportStatus

        |MdePkg/Library/BaseDebugLibSerialPort/BaseDebugLibSerialPort.inf
	DebugPrint -> SerialPortWrite(SerialPortLib)

	|MdePkg/Library/BaseSerialPortLibNull/BaseSerialPortLibNull.inf
	SerialPortWrite -> {}

	|PcAtChipsetPkg/Library/SerialIoLib/SerialIoLib.inf
	SerialPortWrite -> IoWrite8 (gUartBase)

	|MdeModulePkg/Library/BaseSerialPortLib16550/BaseSerialPortLib16550.inf
	16550 UART


        |MdePkg/Library/UefiDebugLibConOut/UefiDebugLibConOut.inf          Uefi driver&App
	DebugPrint -> gST->ConOut->OutputString (gST->ConOut, Buffer);
        |MdePkg/Library/UefiDebugLibStdErr/UefiDebugLibStdErr.inf          Uefi driver&App
	DebugPrint -> gST->StdErr->OutputString (gST->StdErr, Buffer);

PeCoffExtraActionLib|SourceLevelDebugPkg/Library/PeCoffExtraActionLibDebug/PeCoffExtraActionLibDebug.inf


#### 
Setting

Override Pcd in dsc
[PcdsPatchableInModule]
  gEfiMdePkgTokenSpaceGuid.PcdDebugPrintErrorLevel|0x80000042

EFI_D_* -> DEBUG_*
DEBUG_GCD, DEBUG_CACHE
DEBUG_WARN  0x0000-0002
DEBUG_INFO  0x0000-0040
DEBUG_VERBOSE 0x0040-0000
DEBUG_ERROR 0x8000-0000
###### INF MODULE_TYPE
1. Tool definition
   determine include header in Autogen.h
   firmware type in FDF

   ####BaseTool/Source/Python/AutoGen/GenC.py
    MODULE_TYPE: UEFI_DRIVER, DXE_SMM_DRIVER
        affect: autogen.h #include default header
    "BASE"              :   [gBasicHeaderFile],
    "USER_DEFINED"      :   [gBasicHeaderFile]
    "SEC"               :   ["PiPei.h", "Library/DebugLib.h"],
    "PEI_CORE"          :   ["PiPei.h", "Library/DebugLib.h", "Library/PeiCoreEntryPoint.h"],
    "PEIM"              :   ["PiPei.h", "Library/DebugLib.h", "Library/PeimEntryPoint.h"],
    "DXE_CORE"          :   ["PiDxe.h", "Library/DebugLib.h", "Library/DxeCoreEntryPoint.h"],

     with "Library/UefiBootServicesTableLib.h", "Library/UefiDriverEntryPoint.h"],
    "DXE_DRIVER"        :   ["PiDxe.h", "Library/BaseLib.h", "Library/DebugLib.h", 
    "DXE_SMM_DRIVER"    :   ["PiDxe.h", "Library/BaseLib.h", "Library/DebugLib.h",
    "DXE_RUNTIME_DRIVER":   ["PiDxe.h", "Library/BaseLib.h", "Library/DebugLib.h",
    "DXE_SAL_DRIVER"    :   ["PiDxe.h", "Library/BaseLib.h", "Library/DebugLib.h"
    "UEFI_DRIVER"       :   ["Uefi.h",  "Library/BaseLib.h", "Library/DebugLib.h", 
    "UEFI_APPLICATION"  :   ["Uefi.h",  "Library/BaseLib.h", "Library/DebugLib.h","Library/UefiApplicationEntryPoint.h"],

    "SMM_CORE"          :   ["PiDxe.h", "Library/BaseLib.h", "Library/DebugLib.h", "Library/UefiDriverEntryPoint.h"],
2. FDF definition
    [Rule.Common.DXE_SMM_DRIVER]
    FILE SMM
3. Dispatcher behavior
        PeiDispatcher
	   else if (SearchType == PEI_CORE_INTERNAL_FFS_FILE_DISPATCH_TYPE) {
		if ((FfsFileHeader->Type == EFI_FV_FILETYPE_PEIM) ||
		    (FfsFileHeader->Type == EFI_FV_FILETYPE_COMBINED_PEIM_DRIVER) ||
		    (FfsFileHeader->Type == EFI_FV_FILETYPE_FIRMWARE_VOLUME_IMAGE)) {

        Dxe:CoreDispatcher
		EFI_FV_FILETYPE mDxeFileTypes[] = {
		  EFI_FV_FILETYPE_DRIVER,
		  EFI_FV_FILETYPE_COMBINED_SMM_DXE,
		  EFI_FV_FILETYPE_COMBINED_PEIM_DRIVER,
		  EFI_FV_FILETYPE_DXE_CORE,
		  EFI_FV_FILETYPE_FIRMWARE_VOLUME_IMAGE
		};
        SmmDispatcher
		EFI_FV_FILETYPE mSmmFileTypes[] = {
		  EFI_FV_FILETYPE_SMM,
		  EFI_FV_FILETYPE_COMBINED_SMM_DXE
		  //
		  // Note: DXE core will process the FV image file, so skip it in SMM core
		  // EFI_FV_FILETYPE_FIRMWARE_VOLUME_IMAGE
		  //
		};
#ReportStatus

ReportStatus(CodeType, CodeValue)
	CodeType
	EFI_PROGRESS_CODE = 1
	EFI_ERROR_CODE    = 2
	EFI_DEBUG_CODE    = 3

#define EFI_ERROR_MINOR               0x40000000
#define EFI_ERROR_MAJOR               0x80000000
#define EFI_ERROR_UNRECOVERED         0x90000000
#define EFI_ERROR_UNCONTAINED         0xa0000000
                                       C40000002
EFI_ERROR_MINOR + EFI_ERROR_CODE

	CodeValue =  Class + Subclassd + Operation
	V1030006
Class     1000000  EFI_PERIPHERAL
Subclass  0030000  EFI_PERIPHERAL_LOCAL_CONSOLE
Operatoin 0000006  EFI_P_PC_DETECTED

        V1010004 
EFI_PERIPHERAL
EFI_PERIPHERAL_KEYBOARD 10000
EFI_P_PC_ENABLE           004
EFI_P_EC_NOT_CONFIGURED   004
